{
	"info": {
		"_postman_id": "6a08b3c8-38b6-4126-973e-5fabe5c9ae36",
		"name": "Commerce",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8871030"
	},
	"item": [
		{
			"name": "Shop",
			"item": [
				{
					"name": "Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('list all products', () => {\r",
									"    const data = pm.response.json()\r",
									"    const results = data.results\r",
									"    const randomNumber = Math.floor(Math.random() * results.length) + 1\r",
									"    const randomProduct = results[randomNumber]\r",
									"\r",
									"    pm.expect(randomProduct).to.have.property(\"id\")\r",
									"    pm.expect(randomProduct).to.have.property('count')\r",
									"    pm.expect(randomProduct).to.have.property('results')\r",
									"\r",
									"    pm.environment.set('productID', randomProduct.id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}shop/products",
							"host": [
								"{{apiUrl}}shop"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "admin",
									"value": "false",
									"disabled": true
								},
								{
									"key": "search",
									"value": "mini",
									"disabled": true
								},
								{
									"key": "colors",
									"value": "White",
									"disabled": true
								},
								{
									"key": "min_price",
									"value": "30",
									"disabled": true
								},
								{
									"key": "max_price",
									"value": "",
									"disabled": true
								},
								{
									"key": "sizes",
									"value": "XS,M",
									"disabled": true
								},
								{
									"key": "q",
									"value": null,
									"disabled": true
								},
								{
									"key": "cat",
									"value": null,
									"disabled": true
								},
								{
									"key": "sub",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('number of products', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.response.to.have.jsonBody('variants')\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "fr,en-US,q=0.8;en-GB,q=0.7;",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{apiUrl}}shop/products/{{productID}}",
							"host": [
								"{{apiUrl}}shop"
							],
							"path": [
								"products",
								"{{productID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collections Names",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test collection names\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200)\r",
									"\r",
									"    const data = pm.response.json()\r",
									"    const firstItem = data[0]\r",
									"    pm.environment.set(\"collectionName\", firstItem.category.toLowerCase())\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}collection",
							"host": [
								"{{apiUrl}}collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}collection/{{collectionName}}",
							"host": [
								"{{apiUrl}}collection"
							],
							"path": [
								"{{collectionName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendations",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}shop/products/recommendations?q=5",
							"host": [
								"{{apiUrl}}shop"
							],
							"path": [
								"products",
								"recommendations"
							],
							"query": [
								{
									"key": "q",
									"value": "5"
								},
								{
									"key": "p",
									"value": "{{productID}}",
									"disabled": true
								},
								{
									"key": "i",
									"value": "0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Stock",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}stocks/products/{{productID}}",
							"host": [
								"{{apiUrl}}stocks"
							],
							"path": [
								"products",
								"{{productID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Stock Update",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customer_order\": \"{{customerOrder}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}stocks/update",
							"host": [
								"{{apiUrl}}stocks"
							],
							"path": [
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Liked Products",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_ids\": [10, 30]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}shop/liked",
							"host": [
								"{{apiUrl}}shop"
							],
							"path": [
								"liked"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Carts",
			"item": [
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('add cart', () => {\r",
									"    const data = pm.response.json()\r",
									"    pm.environment.set('sessionID', data.session_id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('add product to cart', () => {\r",
									"    if (pm.response.status === 400) {\r",
									"        console.log(\"Failed to add product to cart. Status: 400\")\r",
									"    } else {\r",
									"        const data = pm.response.json()\r",
									"\r",
									"        pm.expect(data).to.have.property('session_id')\r",
									"\r",
									"        const token = data.token.split('-')\r",
									"        const cartIdentifier = token[tokens.length - 1]\r",
									"\r",
									"        pm.environment.set('sessionID', data.token)\r",
									"        pm.environment.set('cartUniqueIdentifier', cartIdentifier)\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product\": {\r\n        \"id\": \"{{productID}}\",\r\n        \"color\": \"Black\"\r\n    },\r\n    \"size\": \"Unique\",\r\n    \"session_id\": \"{{sessionID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}cart/add",
							"host": [
								"{{apiUrl}}cart"
							],
							"path": [
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"list the user's cart\", () => {\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}cart/{{cartUniqueIdentifier}}/items",
							"host": [
								"{{apiUrl}}cart"
							],
							"path": [
								"{{cartUniqueIdentifier}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}cart/{{cartID}}",
							"host": [
								"{{apiUrl}}cart"
							],
							"path": [
								"{{cartID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Products",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "session_id",
									"value": "{{sessionID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiUrl}}cart/authenticate",
							"host": [
								"{{apiUrl}}cart"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}orders",
							"host": [
								"{{apiUrl}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Session ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('test create session ID', () => {\r",
									"    const data = pm.response.json()\r",
									"    const token = data.token.split('-')\r",
									"    const cartIdentifier = token[tokens.length - 1]\r",
									"\r",
									"    pm.environment.set('sessionID', data.token)\r",
									"    pm.environment.set('cartUniqueIdentifier', cartIdentifier)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}cart/session-id",
							"host": [
								"{{apiUrl}}cart"
							],
							"path": [
								"session-id"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product\": {\r\n        \"id\": \"{{productID}}\",\r\n        \"color\": \"Black\"\r\n    },\r\n    \"size\": \"Unique\",\r\n    \"session_id\": \"{{sessionID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}cart/{{cartUniqueIdentifier}}/delete",
							"host": [
								"{{apiUrl}}cart"
							],
							"path": [
								"{{cartUniqueIdentifier}}",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Intent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"create Stripe payment intent\", () => {\r",
									"    const data = pm.response.json()\r",
									"    pm.expect(pm.response.status).to.equal(200)\r",
									"    pm.expect(data).to.have.property(\"intent\")\r",
									"    pm.environment.set(\"stripePaymentIntent\", data.intent) \r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "session_id",
									"value": "{{sessionID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiUrl}}orders/intent",
							"host": [
								"{{apiUrl}}orders"
							],
							"path": [
								"intent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Intent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "session_id",
									"value": "{{sessionID}}",
									"type": "text"
								},
								{
									"key": "intent",
									"value": "{{stripePaymentIntent}}",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Julie",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "Pauline",
									"type": "text"
								},
								{
									"key": "email",
									"value": "zadigo@gmail.com",
									"type": "text"
								},
								{
									"key": "address_line",
									"value": "1 rue de Paris",
									"type": "text"
								},
								{
									"key": "zip_code",
									"value": "59000",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Lille",
									"type": "text"
								},
								{
									"key": "country",
									"value": "France",
									"type": "text"
								},
								{
									"key": "telephone",
									"value": "0611222222",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiUrl}}orders/intent/update",
							"host": [
								"{{apiUrl}}orders"
							],
							"path": [
								"intent",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Payment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "token",
									"value": "tok_visa",
									"description": "This should be tok_visa or tok_xyz for testing",
									"type": "text"
								},
								{
									"key": "card",
									"value": "card_1QRv0PFCpXT3GMhEDZU55F6p",
									"type": "text"
								},
								{
									"key": "client_ip",
									"value": "0.0.0.0",
									"type": "text"
								},
								{
									"key": "session_id",
									"value": "{{sessionID}}",
									"type": "text"
								},
								{
									"key": "intent",
									"value": "{{stripePaymentIntent}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiUrl}}orders/create",
							"host": [
								"{{apiUrl}}orders"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Profile",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}accounts/{{userID}}",
							"host": [
								"{{apiUrl}}accounts"
							],
							"path": [
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Email or Password",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"John\",\r\n    \"lastname\": \"Pendenque\",\r\n    \"email\": \"pifeg33976@bitflirt.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}accounts/{{userID}}",
							"host": [
								"{{apiUrl}}accounts"
							],
							"path": [
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Address",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Jelena\",\r\n    \"lastname\": \"Boskovic\",\r\n    \"address_line\": \"1 rue de Marseille\",\r\n    \"zip_code\": 59000,\r\n    \"country\": \"France\",\r\n    \"city\": \"Lille\",\r\n    \"telephone\": null,\r\n    \"gender\": 1,\r\n    \"is_active\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}accounts/addresses/{{userID}}/update",
							"host": [
								"{{apiUrl}}accounts"
							],
							"path": [
								"addresses",
								"{{userID}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "JWT Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function parseJwt(token) {\r",
									"  var base64Payload = token.split('.')[1];\r",
									"  var payload = Buffer.from(base64Payload, 'base64');\r",
									"  return JSON.parse(payload.toString());\r",
									"}\r",
									"\r",
									"pm.test(\"get access token\", () => {\r",
									"    const data = pm.response.json()\r",
									"\r",
									"    pm.expect(pm.response.code).to.be.equal(200)\r",
									"    pm.expect(data).to.have.property(\"access\")\r",
									"    pm.expect(data).to.have.property(\"refresh\")\r",
									"    \r",
									"    pm.environment.set(\"access\", data.access)\r",
									"    pm.environment.set(\"refresh\", data.refresh)\r",
									"\r",
									"    pm.environment.set(parseJwt(data.access).user_id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"zadigo\",\r\n    \"password\": \"touparet\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authUrl}}token/",
							"host": [
								"{{authUrl}}token"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "JWT Verify",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify access token\", () => {\r",
									"    const data = pm.response.json()\r",
									"\r",
									"    pm.expect(pm.response.code).to.be.equal(200)\r",
									"    pm.expect(Object.keys(data) === 0).to.be.true()\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}token/verify/",
							"host": [
								"{{authUrl}}token"
							],
							"path": [
								"verify",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "JWT Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('refresh access token', () => {\r",
									"    const data = pm.response.json()\r",
									"\r",
									"    pm.expect(data).to.have.property('access')\r",
									"    pm.environment.set('access', data.access)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "refresh",
									"value": "{{refresh}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}token/refresh/",
							"host": [
								"{{authUrl}}token"
							],
							"path": [
								"refresh",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"gida.1@gmail.com\",\r\n    \"password1\": \"touparette-go\",\r\n    \"password2\": \"touparette-go\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}accounts/signup",
							"host": [
								"{{apiUrl}}accounts"
							],
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Address Line",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "firstname",
									"value": "Pauline",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Garoup",
									"type": "text"
								},
								{
									"key": "address_line",
									"value": "16 rue de Paris",
									"type": "text"
								},
								{
									"key": "zip_code",
									"value": "76001",
									"type": "text"
								},
								{
									"key": "country",
									"value": "France",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Lille",
									"type": "text"
								},
								{
									"key": "telephone",
									"value": "0661010101",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiUrl}}accounts/{{userID}}/address-lines",
							"host": [
								"{{apiUrl}}accounts"
							],
							"path": [
								"{{userID}}",
								"address-lines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Address Line",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "firstname",
									"value": "Pauline",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Garoup",
									"type": "text"
								},
								{
									"key": "address_line",
									"value": "16 rue de Paris",
									"type": "text"
								},
								{
									"key": "zip_code",
									"value": "76001",
									"type": "text"
								},
								{
									"key": "country",
									"value": "France",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Lille",
									"type": "text"
								},
								{
									"key": "telephone",
									"value": "0661010101",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiUrl}}accounts/{{userID}}/address-lines/1",
							"host": [
								"{{apiUrl}}accounts"
							],
							"path": [
								"{{userID}}",
								"address-lines",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Address Lines",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}accounts/{{userID}}/address-lines",
							"host": [
								"{{apiUrl}}accounts"
							],
							"path": [
								"{{userID}}",
								"address-lines"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Upload Products File",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/E:/mywebsites/mycommerce/products_smky8.json"
								}
							]
						},
						"url": {
							"raw": "{{apiUrl}}shop/products/upload",
							"host": [
								"{{apiUrl}}shop"
							],
							"path": [
								"products",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Images",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Jupe Gaufrée",
									"type": "text"
								},
								{
									"key": "files",
									"type": "file",
									"src": "/E:/personnal/myscrap/media/fr/jupe-cargo-lani%C3%A8res-c0p151013323_1.jpg"
								}
							]
						},
						"url": {
							"raw": "{{apiUrl}}shop/images/upload",
							"host": [
								"{{apiUrl}}shop"
							],
							"path": [
								"images",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Product Images",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Test jupe",
									"type": "text"
								},
								{
									"key": "files",
									"type": "file",
									"src": [
										"/E:/personnal/myscrap/media/fr/jupe-cargo-lani%C3%A8res-c0p151013323_1.jpg",
										"/E:/personnal/myscrap/media/fr/jupe-cargo-lani%C3%A8res-c0p151013323_2.jpg"
									]
								}
							]
						},
						"url": {
							"raw": "{{apiUrl}}shop/products/{{productID}}/upload-images",
							"host": [
								"{{apiUrl}}shop"
							],
							"path": [
								"products",
								"{{productID}}",
								"upload-images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Images",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}shop/images",
							"host": [
								"{{apiUrl}}shop"
							],
							"path": [
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Associate Images",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product\": {{productID}},\r\n    \"images\": [1, 2]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}shop/images/associate",
							"host": [
								"{{apiUrl}}shop"
							],
							"path": [
								"images",
								"associate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cities",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{quartUrl}}cities?city=villeneuve",
					"host": [
						"{{quartUrl}}cities"
					],
					"query": [
						{
							"key": "city",
							"value": "villeneuve"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fuzzy Test",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiUrl}}shop/fuzzy?s=marine",
					"host": [
						"{{apiUrl}}shop"
					],
					"path": [
						"fuzzy"
					],
					"query": [
						{
							"key": "s",
							"value": "marine"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test('set authorization token', () => {",
					"    const basicToken = pm.environment.get('authenticationToken')",
					"    const accessToken = pm.environment.get('access')",
					"",
					"    if (basicToken && basicToken !== 'null') {",
					"        pm.request.headers.add({",
					"            key: 'Authorization',",
					"            value: `Token ${basicToken}`",
					"        })",
					"    } else if (accessToken && accessToken !== 'null') {",
					"        pm.request.headers.add({",
					"            key: 'Authorization',",
					"            value: `Token ${accessToken}`",
					"        }) ",
					"    }",
					"",
					"    pm.request.headers.add({",
					"        key: 'Content-Type',",
					"        value: 'application/json'",
					"    })",
					"})"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test('invalid token', () => {\r",
					"    if (pm.response.status === 401) {\r",
					"        pm.environment.set(\"access\", null)\r",
					"        pm.environment.set(\"refresh\", null)\r",
					"    }\r",
					"})"
				]
			}
		}
	]
}