# Generated by Django 5.1.4 on 2025-04-26 13:58

import django.db.models.deletion
import shop.utils
import shop.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Used for the video alt attribute', max_length=100, unique=True)),
                ('content', models.FileField(upload_to=shop.utils.video_path, validators=[shop.validators.validate_video_file_extension])),
                ('created_on', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Used for the image's alt attribute", max_length=100, unique=True)),
                ('variant', models.CharField(blank=True, max_length=100, null=True)),
                ('original', models.ImageField(upload_to=shop.utils.image_path)),
                ('is_main_image', models.BooleanField(default=False)),
                ('created_on', models.DateField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_on', 'name'],
                'indexes': [models.Index(condition=models.Q(('is_main_image', True)), fields=['is_main_image'], name='main_image_images')],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('color', models.CharField(choices=[('Print', 'Print'), ('Black', 'Black'), ('Beige', 'Beige'), ('Brown', 'Brown'), ('Camel', 'Camel'), ('Charcoal', 'Charcoal'), ('Cream', 'Cream'), ('Green', 'Green'), ('Grey', 'Grey'), ('Kaki', 'Kaki'), ('Marine', 'Marine'), ('Navy', 'Navy'), ('Orange', 'Orange'), ('Pink', 'Pink'), ('Red', 'Red'), ('Taupe', 'Taupe'), ('White', 'White'), ('Yellow', 'Yellow')], default='Black', help_text='Product available colors', max_length=100)),
                ('sku', models.CharField(blank=True, help_text='Stock Keeping Unit', max_length=100, null=True, unique=True, verbose_name='SKU')),
                ('model_height', models.CharField(blank=True, help_text='Indicates the height of the model wearing the piece of clothing', max_length=100, null=True, validators=[shop.validators.validate_model_height])),
                ('model_size', models.CharField(blank=True, help_text='Indicates the size of the clothe weared by the model', max_length=100, null=True)),
                ('gender_category', models.CharField(choices=[('Man', 'Man'), ('Woman', 'Woman'), ('Kid', 'Kid'), ('Not attributed', 'Not Attributed')], default='Not attributed', help_text='Additional category in order to classify products by gender', max_length=100)),
                ('category', models.CharField(choices=[('Accessories', 'Accessories'), ('Activewear', 'Activewear'), ('Bags', 'Bags'), ('Bras', 'Bras'), ('Denim', 'Denim'), ('Dresses', 'Dresses'), ('Pants', 'Pants'), ('Panties', 'Panties'), ('Shoes', 'Shoes'), ('Skirts', 'Skirts'), ('Shorts', 'Shorts'), ('Suits', 'Suits'), ('Tops', 'Tops'), ('Not attributed', 'Not Attributed'), ('Other', 'Other')], default='Not attributed', help_text='The main category under which the product can be grouped. This allows the grouping of products that fit under the given category', max_length=100)),
                ('sub_category', models.CharField(choices=[('A-line', 'A-line'), ('Apron', 'Apron'), ('Babydoll', 'Babydoll'), ('Balconette', 'Balconette'), ('Ball gown', 'Ball gown'), ('Bikini', 'Bikini'), ('Blouson', 'Blouson'), ('Bodycon', 'Bodycon'), ('Bodyshort', 'Bodyshort'), ('Bouffont', 'Bouffont'), ('Bralette', 'Bralette'), ('Brazilian', 'Brazilian'), ('Brief', 'Brief'), ('Bubble', 'Bubble'), ('Bullet', 'Bullet'), ('Control brief', 'Control brief'), ('Corset', 'Corset'), ('Drop waist', 'Drop waist'), ('Empire', 'Empire'), ('Front fastening', 'Front fastening'), ('Full cup', 'Full cup'), ('G-String', 'G-String'), ('Half cup', 'Half cup'), ('Halter', 'Halter'), ('Hipster', 'Hipster'), ('Jumper', 'Jumper'), ('Minimizer', 'Minimizer'), ('Not attributed', 'Not attributed'), ('Nursing', 'Nursing'), ('One shoulder', 'One shoulder'), ('Peasant', 'Peasant'), ('Pegged', 'Pegged'), ('Peplum', 'Peplum'), ('Plunge', 'Plunge'), ('Princess', 'Princess'), ('Seamless', 'Seamless'), ('Sheath', 'Sheath'), ('Shift', 'Shift'), ('Shirt', 'Shirt'), ('Sleep bra', 'Sleep bra'), ('Slit', 'Slit'), ('Soft cup', 'Soft cup'), ('Sports', 'Sports'), ('Strapless', 'Strapless'), ('Strapless', 'Strapless'), ('Sun', 'Sun'), ('T-Shirt', 'T-Shirt'), ('Tent', 'Tent'), ('Thong', 'Thong'), ('Trapezoid', 'Trapezoid'), ('Triangle', 'Triangle'), ('Tunic', 'Tunic'), ('Underwire', 'Underwire'), ('V-line', 'V-line'), ('Wired', 'Wired'), ('Wrap', 'Wrap'), ('Yoke', 'Yoke'), ('A-line', 'A-line'), ('Apron', 'Apron'), ('Babydoll', 'Babydoll'), ('Balconette', 'Balconette'), ('Ball gown', 'Ball gown'), ('Bikini', 'Bikini'), ('Blouson', 'Blouson'), ('Bodycon', 'Bodycon'), ('Bodyshort', 'Bodyshort'), ('Bouffont', 'Bouffont'), ('Bralette', 'Bralette'), ('Brazilian', 'Brazilian'), ('Brief', 'Brief'), ('Bubble', 'Bubble'), ('Bullet', 'Bullet'), ('Control brief', 'Control brief'), ('Corset', 'Corset'), ('Drop waist', 'Drop waist'), ('Empire', 'Empire'), ('Front fastening', 'Front fastening'), ('Full cup', 'Full cup'), ('G-String', 'G-String'), ('Half cup', 'Half cup'), ('Halter', 'Halter'), ('Hipster', 'Hipster'), ('Jumper', 'Jumper'), ('Minimizer', 'Minimizer'), ('Not attributed', 'Not attributed'), ('Nursing', 'Nursing'), ('One shoulder', 'One shoulder'), ('Peasant', 'Peasant'), ('Pegged', 'Pegged'), ('Peplum', 'Peplum'), ('Plunge', 'Plunge'), ('Princess', 'Princess'), ('Seamless', 'Seamless'), ('Sheath', 'Sheath'), ('Shift', 'Shift'), ('Shirt', 'Shirt'), ('Sleep bra', 'Sleep bra'), ('Slit', 'Slit'), ('Soft cup', 'Soft cup'), ('Sports', 'Sports'), ('Strapless', 'Strapless'), ('Strapless', 'Strapless'), ('Sun', 'Sun'), ('T-Shirt', 'T-Shirt'), ('Tent', 'Tent'), ('Thong', 'Thong'), ('Trapezoid', 'Trapezoid'), ('Triangle', 'Triangle'), ('Tunic', 'Tunic'), ('Underwire', 'Underwire'), ('V-line', 'V-line'), ('Wired', 'Wired'), ('Wrap', 'Wrap'), ('Yoke', 'Yoke')], default='Not attributed', help_text='Additionnal category that can be used to better classify the product in the database', max_length=100, verbose_name='Sub-category')),
                ('unit_price', models.DecimalField(decimal_places=2, default=1, help_text='Cost value of the current product', max_digits=5, validators=[shop.validators.price_validator])),
                ('sale_value', models.PositiveIntegerField(default=0, help_text='The current sale percentage on the product unit price')),
                ('sale_price', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('on_sale', models.BooleanField(default=False)),
                ('display_new', models.BooleanField(default=False, help_text='Manual way of showing a product as new in addition to the auto aggregation in done in Novelty')),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('active', models.BooleanField(default=False)),
                ('modified_on', models.DateField(auto_now_add=True)),
                ('created_on', models.DateField(auto_now=True)),
                ('images', models.ManyToManyField(blank=True, to='shop.image')),
                ('video', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='shop.video')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-created_on'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Novelty',
            fields=[
            ],
            options={
                'verbose_name_plural': 'novelties',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('shop.product',),
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('shop.product',),
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('products', models.ManyToManyField(blank=True, to='shop.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Wishlist',
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(condition=models.Q(('on_sale', True)), fields=['on_sale'], name='on_sale_products'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(condition=models.Q(('display_new', True)), fields=['display_new'], name='display_new_products'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(condition=models.Q(('active', True)), fields=['active'], name='active_products'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('unit_price__gt', 0)), name='unit_price_over_zero'),
        ),
        migrations.AddConstraint(
            model_name='wishlist',
            constraint=models.UniqueConstraint(fields=('name', 'user'), name='unique_list_name_per_user'),
        ),
    ]
